// Code generated by protoc-gen-go.
// source: blockmodel.proto
// DO NOT EDIT!

package messages

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type BlockModel struct {
	Name             *string                `protobuf:"bytes,1,req" json:"Name,omitempty"`
	Blocks           []*Block               `protobuf:"bytes,2,rep" json:"Blocks,omitempty"`
	Animations       []*BlockModelAnimation `protobuf:"bytes,3,rep" json:"Animations,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *BlockModel) Reset()         { *m = BlockModel{} }
func (m *BlockModel) String() string { return proto.CompactTextString(m) }
func (*BlockModel) ProtoMessage()    {}

func (m *BlockModel) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BlockModel) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *BlockModel) GetAnimations() []*BlockModelAnimation {
	if m != nil {
		return m.Animations
	}
	return nil
}

type Vector3 struct {
	X                *int32 `protobuf:"varint,1,req" json:"X,omitempty"`
	Y                *int32 `protobuf:"varint,2,req" json:"Y,omitempty"`
	Z                *int32 `protobuf:"varint,3,req" json:"Z,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Vector3) Reset()         { *m = Vector3{} }
func (m *Vector3) String() string { return proto.CompactTextString(m) }
func (*Vector3) ProtoMessage()    {}

func (m *Vector3) GetX() int32 {
	if m != nil && m.X != nil {
		return *m.X
	}
	return 0
}

func (m *Vector3) GetY() int32 {
	if m != nil && m.Y != nil {
		return *m.Y
	}
	return 0
}

func (m *Vector3) GetZ() int32 {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return 0
}

type Block struct {
	Position         *Vector3 `protobuf:"bytes,1,req" json:"Position,omitempty"`
	Type             *int32   `protobuf:"varint,2,req" json:"Type,omitempty"`
	Groups           []string `protobuf:"bytes,3,rep" json:"Groups,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}

func (m *Block) GetPosition() *Vector3 {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Block) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Block) GetGroups() []string {
	if m != nil {
		return m.Groups
	}
	return nil
}

type BlockModelAnimation struct {
	Name             *string                        `protobuf:"bytes,1,req" json:"Name,omitempty"`
	Sequenzes        []*BlockModelAnimationSequenze `protobuf:"bytes,2,rep" json:"Sequenzes,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *BlockModelAnimation) Reset()         { *m = BlockModelAnimation{} }
func (m *BlockModelAnimation) String() string { return proto.CompactTextString(m) }
func (*BlockModelAnimation) ProtoMessage()    {}

func (m *BlockModelAnimation) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *BlockModelAnimation) GetSequenzes() []*BlockModelAnimationSequenze {
	if m != nil {
		return m.Sequenzes
	}
	return nil
}

type BlockModelAnimationSequenze struct {
	Group            *string  `protobuf:"bytes,1,req" json:"Group,omitempty"`
	NewPos           *Vector3 `protobuf:"bytes,2,req" json:"NewPos,omitempty"`
	Time             *int32   `protobuf:"varint,3,req" json:"Time,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BlockModelAnimationSequenze) Reset()         { *m = BlockModelAnimationSequenze{} }
func (m *BlockModelAnimationSequenze) String() string { return proto.CompactTextString(m) }
func (*BlockModelAnimationSequenze) ProtoMessage()    {}

func (m *BlockModelAnimationSequenze) GetGroup() string {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return ""
}

func (m *BlockModelAnimationSequenze) GetNewPos() *Vector3 {
	if m != nil {
		return m.NewPos
	}
	return nil
}

func (m *BlockModelAnimationSequenze) GetTime() int32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func init() {
}
